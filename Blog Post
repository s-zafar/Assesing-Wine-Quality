Introduction:
The task here is to predict the quality of red wine and white wine on a scale of 0â€“10  for given a set of features as inputs. 
I have solved it as a regression problem using Linear Regression.
The dataset used is Wine Quality Data set from https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/ 
Input variables are fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol. And the output variable (based on sensory data) is quality (score between 0 and 10)

Import Libraries:
The code is in python. Other than this, i imported the following libraries:
import pandas as pd
from sklearn import metrics
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from math import sqrt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import BaggingRegressor, BaggingClassifier, RandomForestRegressor, RandomForestClassifier, AdaBoostRegressor, AdaBoostClassifier
from sklearn.metrics import mean_squared_error, f1_score
from sklearn import svm

Work Flow:
Read the data using pandas into a dataframe. To check the top 5 rows of the dataset, use df.head()
Concatting the two data frames for red and white wines and using Boolian Classification to tag red_wine as 0; white wine as 1
Check for null values
Check for Duplicates
Drop duplicate
Finding correlations between each attribute of dataset using corr() using 
```correlations = df.corr()['quality'].drop('quality')
 print(correlations)```
To draw a heatmap and used the below code.
```sns.heatmap(df.corr())
plt.show()```
Define a function get_features()which outputs only those features whose correlation is above a threshold value (passed as an input parameter to function).
```def get_features(correlation_threshold):
    abs_corrs = correlations.abs()
    high_correlations = abs_corrs[abs_corrs > correlation_threshold].index.values.tolist()
    return high_correlations```
Create X containing input features and y containing the quality variable. 
The threshold value can be changed if you want.    
Create training and testing set using train_test_split.
X_train,X_test,y_train,y_test=train_test_split(x,y,stratify=yrandom_state=42)
Building Linear Regression model.
Once trained, coef_gives the values of the coefficients for each feature.
To predict the quality of wine with this model, use predict().
Calculated Root mean squared error for training as well as testing set.
The RMSE for training and test sets is very similar and so we have built a good model. 
We create a data frame with displaying coefficients of each feature.
 We were able to build a Linear regression model to predict the quality of wine with RMSE scores of 0.747 and 0.748 for training and testing set respectively. 
 
Predictions:
#A one  unit increase in citric acid  will lead to an increase of 0.194 in Quality of  red_wine
#A one  unit increase in density will lead to an decrease of 28.0 in Quality of red_wine 
# A one  unit increase in alcohol will lead to an increase of 0.3 in Quality of red_wine #(obviously)
#Rest are not significant increase in quality
#A one unit increase in volatile acidity will lead to a decrease of 1.56 in Quality of wine, and similarly for the other features    

#END#

